%Simplex
clc;
clear all;
close all;

C=[2 5];
A=[1,4;3,1;1,1];
b=[24;21;9];

[m,n]=size(A);
s=eye(m);% identity matrix it creates 

A=[A s b];

cost=zeros(1,n+m+1);
cost(1:n)=C;

bv=n+1:1:n+m;
zjcj=cost(bv)*A-cost;
zcj=[zjcj;A];

table=array2table(zcj);
table.Properties.VariableNames(1:size(A,2))={'x1','x2','s1','s2','s3','b'};
flag=true;
ratio=[];
while flag
    if any(zjcj<0)
        fprintf('curr not optimal');
        zc=zjcj(1:end-1);
        [Enter_val,pvt_col]=min(zc);
        if all(A(:,pvt_col)<=0)
            error('lpp unbounded all entries <=0 in col %d',pvt_col);
        else
            sol=A(:,end);
            col=A(:,pvt_col);
            for i=1:m
                if col(i)>0
                    ratio(i)=sol(i)./col(i);
                else
                    ratio(i)=inf;
                end
            end
            [leaving_val,pvt_row]=min(ratio);
        end
        bv(pvt_row)=pvt_col;
        pvt_key=A(pvt_row,pvt_col);
        A(pvt_row,:)=A(pvt_row,:)./pvt_key;
        for i=1:m
            if i~=pvt_row
                A(i,:)=A(i,:)-A(i,pvt_col).*A(pvt_row,:);
            end
        end
        zjcj=zjcj-zjcj(pvt_col).*A(pvt_row,:);
        zcj=[zjcj;A];
        
        table=array2table(zcj);
        table.Properties.VariableNames={'x1','x2','s1','s2','s3','sol'};
        display(table);
    else 
        flag=false;
    end
end    
display(table);

%-------------------------------------------------------------------------

%Big-M
clc;
clear all;
close all;

cost= [3 2 0 0 -1000 0];
a = [1 1 ; 1 3 ;1 -1];
b = [2;3;1];

[m,n] = size(a);
s = eye(m);

A = [a s b];

bv = n+1:1:n+m;
zjcj = cost(bv)*A - cost;
zcj = [zjcj; A];

simplexTable=array2table(zcj);
simplexTable.Properties.VariableNames(1:size(zcj,2))={'x1','x2','s1','s2','a1','Sol'};
display(simplexTable);

flag=true;
while flag
    if any(zjcj<0)
        fprintf("The Current BFS is not Optimal \n");
        zc = zjcj(1:end-1);
        [Enter_val, pvt_col] = min(zc);
        if all (A(:,pvt_col)<=0)
            error("LPP is Unbounded all entries are <=0 in column %d",pvt_col);
        else
            sol = A(:,end)
            column = A(:,pvt_col)
            for i = 1:m
                if column(i) > 0
                    ratio(i) = sol(i)./column(i);
                else
                    ratio(i) = inf;
                end
            end
            [leaving_val, pvt_row] = min(ratio);
        end
    bv(pvt_row) = pvt_col;
    pvt_key = A(pvt_row, pvt_col);
    A(pvt_row,:) = A(pvt_row,:)./pvt_key;
    for i = 1:m
        if (i~=pvt_row)
            A(i,:) = A(i,:) - A(i, pvt_col).*A(pvt_row,:);
        end
    end
    zjcj = zjcj - zjcj(pvt_col).*A(pvt_row,:);
    zcj = [zjcj;A];

    table = array2table(zcj);
    table.Properties.VariableNames(1:n+m+1) = {'x1','x2','s1','s2','a1','Sol'};
    display(table);
    else
        flag = false;
        fprintf("The Current BFS is Optimal \n")
    end
end

%-------------------------------------------------------------------------

%Two-Phase
clc;
clear all;
close all;

Variables={'x_1','x_2','x_3','s_1','s_2','A_1','A_2','Sol'};
OptVariables={'x_1','x_2','x_3','s_1','s_2','Sol'};
C=[-7.5 3 0 0 0 -1 -1 0];
A=[3 -1 -1 -1 0 1 0 3; 1 -1 1 0 -1 0 1 2];
BV=[6 7];
D=[0 0 0 0 0 -1 -1 0]; 

StartBV=find(D<0);

fprintf('Phase 1\n');
[BFS,A]=simp(A,BV,D,Variables);

fprintf('Phase 2\n');
A(:,StartBV)=[];
C(:,StartBV)=[]; 
[OptBFS,OptA]=simp(A,BFS,C,OptVariables);

FINAL_BFS=zeros(1,size(A,2));
FINAL_BFS(OptBFS)=OptA(:,end);
FINAL_BFS(end)=sum(FINAL_BFS.*C);

OptimalBFS=array2table(FINAL_BFS);
OptimalBFS.Properties.VariableNames(1:size(OptimalBFS,2))=OptVariables;
display(OptimalBFS);


function [BFS,A]=simp(A,BV,D,Variables)
    ZjCj=D(BV)*A-D;
    RUN=true;
    while RUN
        ZC=ZjCj(1:end-1);
        if any(ZC<0)
            fprintf(' The Current BFS is NOT Optimal \n\n')
            [entcol, pvt_col]=min(ZC);
            fprintf('Entering Col=%d \n',pvt_col) ;
            sol=A(:,end);
            Column=A(:,pvt_col);
            if Column<0
                fprintf('Unbounded Solution\n');
            else
                for i=1:size(A,1)
                    if Column(i)>0
                        ratio(i)=sol(i)./Column(i);
                    else
                        ratio(i)=inf;
                    end
                end
                [MinRatio, pvt_row]=min(ratio);
                fprintf('Leaving Row =%d \n',pvt_row)
            end
            BV(pvt_row)=pvt_col;
            pvt_key=A(pvt_row,pvt_col);
            A(pvt_row,:)=A(pvt_row,:)./pvt_key;
            for i=1:size(A,1)
                if i~=pvt_row
                    A(i,:)=A(i,:)-A(i,pvt_col).*A(pvt_row,:);
                end
            end
            ZjCj=ZjCj-ZjCj(1,pvt_col).*A(pvt_row,:);
            ZCj=[ZjCj;A];
            TABLE=array2table(ZCj);
            TABLE.Properties.VariableNames(1:size(ZCj,2))=Variables;
            display(table);
            BFS(BV)=A(:,end);
        else
            RUN=false;
            fprintf('Current BFS is Optimal\n');
            fprintf('Phase 1 END\n\n\n');
            BFS=BV;
        end
    end
end

%-------------------------------------------------------------------------

%Dual Simplex
clc;
clear all;
close all;

Z=[-3 -5]; %Enter cost
A=[-1 -3;-1 -1]; %Enter coefficient matrix
b=[-3;-2]; %Enter rhs column vector
variables=["x1","x2","s1","s2","Sol"];
s=eye(size(A,1));
Z=[Z zeros(1,size(b,1)) 0];
A=[A s b]; 

BV=[];

for j=1:size(s,2)
    for i=1:size(A,2)
        if A(:,i)==s(:,j)
            BV=[BV i];
        end
    end
end

fprintf("Basic Variables:\n");
disp(variables(BV));

run=true;
while run
    ZjCj=Z(BV)*A-Z;
    table=[ZjCj;A];
    simplexTable=array2table(table);
    simplexTable.Properties.VariableNames(1:size(simplexTable,2))=variables;
    disp(simplexTable);
    if any(A(:,end)<0)
        fprintf("Infeasible BFS.\n");
        [leavingVal,pivotRow]=min(A(:,end));
        fprintf("Leaving Row=%d \n",pivotRow);
        Row=A(pivotRow,1:end-1);
        Zrow=ZjCj(:,1:end-1);
        for i=1:size(Row,2)
            if Row(i)<0
                ratio(i)=abs(Zrow(i)./Row(i));
            else
                ratio(i)=inf;
            end
        end
        [minRatio,pivotCol]=min(ratio);
        BV(pivotRow)=pivotCol;
        fprintf("New Basic Variables:\n");
        disp(variables(BV));
        pivotVal=A(pivotRow,pivotCol);
        A(pivotRow,:)=A(pivotRow,:)./pivotVal;
        for i=1:size(A,1)
            if i~=pivotRow
                A(i,:)=A(i,:)-A(i,pivotCol).*A(pivotRow,:);
            end
            ZjCj=ZjCj-ZjCj(pivotCol).*A(pivotRow,:);
        end
    else
        run=false;
        fprintf("Feasible BFS.\n");
    end
end

%-------------------------------------------------------------------------
%Transportation-LCM
clc;
clear all;
close all;

cost=[2 7 4;3 3 1;5 5 4;1 6 2];
a=[5 8 7 14]; %supplies
b=[7 9 18]; % demand
% check balanced or unbalanced
if sum(a)==sum(b)
    fprintf('Balanced\n');
else
    fprintf('Unbalanced');
    if sum(a)<sum(b)
        cost(end+1,:)=zeros(1,size(a,2));
    elseif sum(b)<sum(a)
        cost(:,end+1)=zeros(1,size(a,2));
    end
end
icost=cost;
x=zeros(size(cost));
[m,n]=size(cost);
bfs=m+n-1;
for i=1:size(cost,1)
    for j=1:size(cost,2)
        hh=min(cost(:)); %minimum cost
        [row_index,col_index]=find(hh==cost); % cell with min cost
        x11=min(a(row_index),b(col_index));
        [val,ind]=max(x11); % finding max allocation
        ii=row_index(ind); % row position
        jj=col_index(ind); % col position
        y11=min(a(ii),b(jj)); % find the value
        x(ii,jj)=y11; % assign allocation
        a(ii)=a(ii)-y11; % reduce row value
        b(jj)=b(jj)-y11; % reduce column value
        cost(ii,jj)=inf; % cell visited
    end
end
%print bfs
fprintf('Initial BFS= \n');
ib=array2table(x);
disp(ib);
totalbfs=length(nonzeros(x));
if totalbfs==bfs
    fprintf('Non Degenerate BFS \n');
else
    fprintf('Degenerate BFS \n');
end
initialcost=sum(sum(icost.*x));
fprintf('Cost= %d\n',initialcost);

%-------------------------------------------------------------------------